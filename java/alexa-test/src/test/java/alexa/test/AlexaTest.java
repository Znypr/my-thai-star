package alexa.test;

import static org.junit.Assert.assertEquals;

import java.util.HashMap;
import java.util.Map;

import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
// Generated by Selenium IDE
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class AlexaTest {
  private WebDriver driver;

  private Map<String, Object> vars;

  JavascriptExecutor js;

  @Before
  public void setUp() throws InterruptedException {

    System.setProperty("webdriver.chrome.driver",
        "C:\\projects\\my-project\\workspaces\\main\\my-thai-star\\java\\alexa-test\\chromedriver.exe");
    this.driver = new ChromeDriver();
    this.js = (JavascriptExecutor) this.driver;
    this.vars = new HashMap<String, Object>();

    // login to aws
    this.driver.get(
        "https://www.amazon.com/ap/signin?openid.pape.preferred_auth_policies=Singlefactor&openid.pape.max_auth_age=7200000&openid.return_to=https%3A%2F%2Fdeveloper.amazon.com%2Falexa%2Fconsole%2Fask%2Fbuild%2Fcustom%2Famzn1.ask.skill.c3ce8e9c-81f3-4a53-bf3d-53db70026366%2Fdevelopment%2Fde_DE%2Finvocation&openid.identity=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.assoc_handle=amzn_dante_us&openid.mode=checkid_setup&marketPlaceId=ATVPDKIKX0DER&openid.claimed_id=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0&");
    this.driver.manage().window().setSize(new Dimension(1200, 800));
    // this.driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
    this.driver.findElement(By.id("ap_email")).sendKeys(/* TODO: insert email */);
    this.driver.findElement(By.id("ap_password")).click();
    this.driver.findElement(By.id("ap_password")).sendKeys(/* TODO: insert password */);
    this.driver.findElement(By.id("ap_password")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    this.driver.findElement(By.cssSelector(".col > .p-0")).click();
    Thread.sleep(5000);
    this.driver.findElement(By.cssSelector(".astro-text-large")).click();
    Thread.sleep(5000);
    this.driver.findElement(By.id("test")).click();
    Thread.sleep(5000);
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).click();
    Thread.sleep(5000);
  }

  @After
  public void tearDown() {

    this.driver.quit();
  }

  /**
   * tests, if dishes of category rice can be searched
   *
   * @throws InterruptedException
   */
  @Test
  @Ignore
  public void searchRice() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Hallo", "Willkommen bei My-Thai-Star! Was mÃ¶chten Sie heute tun?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("suche nach rice");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    // css=.askt-dialog__message--response
    Thread.sleep(5000);
    assertEquals("Hallo", "Es gibt Reis",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

  }

  /**
   * tests, if dish info is correct
   *
   * @throws InterruptedException
   */
  @Test
  @Ignore
  public void compareDishInfo() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    // C104
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("was ist green chicken curry");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("green chicken curry",
        "Beschreibung von Thai green chicken curry : Master this aromatic, creamy and extremely tasty chicken Thai green curry recipe from Jamie Oliver and treat yourself to an authentic taste of South East Asia.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("was ist Thai Spicy Basil Fried Rice");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Thai Spicy Basil Fried Rice",
        "Beschreibung von Thai Spicy Basil Fried Rice : This is a staple of Thai cooking. Adjust the spices to your own tastes for a really great use for leftover rice!! I get the basil from a local Asian market. It has a different flavor than that of regular basil and makes all the difference in this recipe. It is fast and fairly easy to make, but requires constant stirring",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("was ist Garlic Paradise Salad");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Garlic Paradise Salad",
        "Beschreibung von Garlic Paradise Salad : From the world-famous Gilroy Garlic Festival to a fierce 40-clove garlic salad in San Francisco and a gut-busting garlic sandwich in Philly, we feature the tastiest places to get your garlic on.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    // C105
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("was ist lasagne");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("lasagne", "Entschuldigung, das weiss ich leider nicht.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    // C106
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("was ist test");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("lasagne", "Entschuldigung, das weiss ich leider nicht.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

  }

  /**
   * tests, if dishes can be filtered by course
   *
   * @throws InterruptedException
   */
  @Test
  @Ignore
  public void askForCategories() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    // C119 + C120
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("welche starter gibt es");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("step1", "Es gibt: Thai Thighs Fish/Prawns",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("Welche Gerichte bietet Ihr an");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("step2", "Es gibt: Thai green chicken curry, Thai Spicy Basil Fried Rice, Garlic Paradise Salad",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    // C121
    this.driver.findElement(By.cssSelector(".askt-utterance__input"))
        .sendKeys("welche starter und hauptspeisen gibt es");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("step3", "Es kann nur nach einer kategorie gefiltert werden",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    // C122 + C123
    this.driver.findElement(By.cssSelector(".askt-utterance__input"))
        .sendKeys("Was gibt es an vegetarischen Gerichten");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("step3", "Es gibt: Thai Spicy Basil Fried Rice, Thai Peanut Beef",
        // TODO: change category of thai peanut beef
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    // C124 + C125
    this.driver.findElement(By.cssSelector(".askt-utterance__input"))
        .sendKeys("was gibt es für vegetarische reis gerichte");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("step3", "Es gibt: Thai Spicy Basil Fried Rice",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    // C126 + C127
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("was gibt es unter 10 euro");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("step4",
        "Der Preis wurde auf 10 Euro eingeschraenkt. Es gibt: Thai Thighs Fish/Prawns, Garlic Paradise Salad, Tea, Beer",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    // C128
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("was gibt es unter minus 10 euro");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("step5", "Der Preis kann nicht auf negative Zahlen eingestellt werden.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    // C129
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("was gibt es unter test euro");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("step6", "Entschuldigung, das weiss ich leider nicht.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    // C130
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("was gibt es unter test euro");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("step7", "Die Anfrage führte zu keinen Ergebnissen. Bitte versuchen Sie eine andere Anfrage.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

  }

  /**
   * tests, if beverages can be searched
   *
   * @throws InterruptedException
   */
  @Test
  public void filterBeverage() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    // C131 + C132
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("Was gibt es an tea");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    // css=.askt-dialog__message--response
    Thread.sleep(5000);
    assertEquals("step2",
        "Es gibt: Assam Black Tea, Ceylon Black Tea, Darjeeling Black Tea, English Breakfast, Assam Green, Darjeeling Green Tea, Moonlight White",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    // C133
    this.driver.findElement(By.cssSelector(".askt-utterance__input"))
        .sendKeys("Was gibt es an getränken unter 10 euro");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    // css=.askt-dialog__message--response
    Thread.sleep(5000);
    assertEquals("step3", "Es gibt: Tea, Beer in verschiedenen Sorten",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    // C134
    this.driver.findElement(By.cssSelector(".askt-utterance__input"))
        .sendKeys("Was gibt es an getränken unter minus 10 euro");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    // css=.askt-dialog__message--response
    Thread.sleep(5000);
    assertEquals("step4", "Der Preis kann nicht auf negative Zahlen eingestellt werden.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    // C135
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("Was gibt es an wein");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    // css=.askt-dialog__message--response
    Thread.sleep(5000);
    assertEquals("step4", "Die Anfrage führte zu keinen Ergebnissen. Bitte versuchen Sie eine andere Anfrage.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    // C136
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("Was gibt es an test getränken");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    // css=.askt-dialog__message--response
    Thread.sleep(5000);
    assertEquals("step4", "Entschuldigung, das weiss ich leider nicht.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

  }

  /**
   * tests, if beverages can be sorted
   *
   * @throws InterruptedException
   */
  @Test
  public void sortBeverage() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    // C110
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("sortiere getränke nach namen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    // css=.askt-dialog__message--response
    Thread.sleep(5000);
    assertEquals("step1", "Die Sortierung erfolgt nun nach Namen. Beer, Tea",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    // C112
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("sortiere getränke nach test");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    // css=.askt-dialog__message--response
    Thread.sleep(5000);
    assertEquals("step2", "Entschuldigung, das weiss ich leider nicht.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

  }

  /**
   * tests, if dishes can be found
   *
   * @throws InterruptedException
   */
  @Test
  public void searchDish() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    // C113
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("Welche Gerichte bietet Ihr an");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("step1", this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText(),
        "Es gibt: Thai green chicken curry, Thai Spicy Basil Fried Rice, Garlic Paradise Salad");
    Thread.sleep(500);

    // C115
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("Welche Test bietet Ihr an");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("step1", this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText(),
        "Entschuldigung, das weiss ich leider nicht.");
    Thread.sleep(500);

  }

  /**
   * tests, if beverages can be found
   *
   * @throws InterruptedException
   */
  @Test
  public void searchBeverage() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    // C116
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("Was gibt es an getränken");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("step1", "Es gibt: Tea, Beer in verschiedenen Sorten",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

    // C118
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("Was gibt es an test");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("step2", "Entschuldigung, das weiss ich leider nicht.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);

  }

  // ---------------------------------------------------------------------------------------------------- //
  // ---------------------------------------------------------------------------------------------------- //
  // ---------------------------------------------------------------------------------------------------- //

  @Test
  public void orderWithoutExtra() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);

    Thread.sleep(5000);
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("thai green chicken curry bestellen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);

    Thread.sleep(5000);
    assertEquals("Wie oft wollen Sie thai green chicken curry bestellen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3 mal");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals(
        "Wollen Sie Tofu oder extra Curry, falls für das ausgewählte Gericht möglich, zu ihrer Bestellung hinzufügen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("nein");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Sie mÃ¼ssen zunÃ¤chst einen Tisch buchen um Bestellungen zu tÃ¤tigen.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tisch buchen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Mit wie vielen Leuten moechtest du kommen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Um wieviel Uhr soll ich deinen Tisch freihalten ?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("20 uhr");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("An welchem Tag wollt Ihr kommen",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("morgen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Cool wir sehen uns dann!",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("Warenkorb");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Ihr Warenkorb enthält 3 thai green chicken curry ohne Extra",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

  @Test
  public void orderWithExtra() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);

    Thread.sleep(5000);
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("thai green chicken curry bestellen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);

    Thread.sleep(5000);
    assertEquals("Wie oft wollen Sie thai green chicken curry bestellen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3 mal");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals(
        "Wollen Sie Tofu oder extra Curry, falls für das ausgewählte Gericht möglich, zu ihrer Bestellung hinzufügen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("Tofu");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Es wird 3 thai green chicken curry mit tofu extra zum Warenkorb hinzugefügt, korrekt?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("ja");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Sie mÃ¼ssen zunÃ¤chst einen Tisch buchen um Bestellungen zu tÃ¤tigen.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tisch buchen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Mit wie vielen Leuten moechtest du kommen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Um wieviel Uhr soll ich deinen Tisch freihalten ?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("20 uhr");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("An welchem Tag wollt Ihr kommen",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("morgen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Cool wir sehen uns dann!",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("Warenkorb");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Ihr Warenkorb enthält 3 thai green chicken curry mit extra Tofu",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

  @Test
  public void invalidOrder() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);

    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("thai green chicken curry bestellen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);

    Thread.sleep(5000);
    assertEquals("Wie oft wollen Sie thai green chicken curry bestellen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3 mal");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals(
        "Wollen Sie Tofu oder extra Curry, falls für das ausgewählte Gericht möglich, zu ihrer Bestellung hinzufügen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("test");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals(
        "Das verstehe ich nicht. Wollen Sie Tofu oder extra Curry, falls für das ausgewählte Gericht möglich, zu ihrer Bestellung hinzufügen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tofu");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Es wird 3 thai green chicken curry mit tofu extra zum Warenkorb hinzugefügt, korrekt?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("ja");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Sie mÃ¼ssen zunÃ¤chst einen Tisch buchen um Bestellungen zu tÃ¤tigen.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tisch buchen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Mit wie vielen Leuten moechtest du kommen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Um wieviel Uhr soll ich deinen Tisch freihalten ?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("20 uhr");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("An welchem Tag wollt Ihr kommen",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("morgen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Cool wir sehen uns dann!",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("Warenkorb");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Ihr Warenkorb enthält 3 thai green chicken curry mit extra Tofu",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

  @Test
  public void bookTableTomorrow() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("ich möchte einen tisch buchen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);

    Thread.sleep(5000);
    assertEquals("step1", "Mit wie vielen Leuten moechtest du kommen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("4");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("step2", "Um wieviel Uhr soll ich deinen Tisch freihalten ?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(500);
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("10 Uhr");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("step2", "An welchem Tag wollt Ihr kommen",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("morgen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(30000);
    assertEquals("step3", "Cool wir sehen uns dann!",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

  }

  @Test
  public void bookTableToday() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tisch buchen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Mit wie vielen Leuten moechtest du kommen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Um wieviel Uhr soll ich deinen Tisch freihalten ?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("20 uhr");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("An welchem Tag wollt Ihr kommen",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("heute");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(30000);

    assertEquals("Cool wir sehen uns dann!",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

  @Test
  public void bookTableYesterday() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tisch buchen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Mit wie vielen Leuten moechtest du kommen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Um wieviel Uhr soll ich deinen Tisch freihalten ?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("20 uhr");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("An welchem Tag wollt Ihr kommen",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(6000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("gestern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(6000);

    assertEquals("Bitte geben Sie ein Datum in der Zukunft an",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(6000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("heute");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(30000);

    assertEquals("Cool wir sehen uns dann!",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

  @Test
  public void bookTableWithDateInThePast() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tisch buchen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Mit wie vielen Leuten moechtest du kommen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Um wieviel Uhr soll ich deinen Tisch freihalten ?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("20 uhr");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("An welchem Tag wollt Ihr kommen",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("erster januar 2021");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Bitte geben Sie ein Datum in der Zukunft an",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(6000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("vierundzwanzigster dezember 2021");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(30000);

    assertEquals("Cool wir sehen uns dann!",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

  @Test
  public void bookTableWithNumberAsDate() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tisch buchen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Mit wie vielen Leuten moechtest du kommen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Um wieviel Uhr soll ich deinen Tisch freihalten ?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("20 uhr");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("An welchem Tag wollt Ihr kommen",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("zehnter fünfter");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(30000);

    assertEquals("Cool wir sehen uns dann!",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

  @Test
  public void bookTableWithWordAsDate() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tisch buchen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Mit wie vielen Leuten moechtest du kommen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Um wieviel Uhr soll ich deinen Tisch freihalten ?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("20 uhr");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("An welchem Tag wollt Ihr kommen",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("zehnter Oktober");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(30000);

    assertEquals("Cool wir sehen uns dann!",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

  @Test
  public void bookTableDayAfterTomorrow() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tisch buchen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Mit wie vielen Leuten moechtest du kommen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Um wieviel Uhr soll ich deinen Tisch freihalten ?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("20 uhr");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("An welchem Tag wollt Ihr kommen",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("übermorgen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(30000);

    assertEquals("Cool wir sehen uns dann!",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

  @Test
  public void bookTableWeekdayInAWeek() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tisch buchen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Mit wie vielen Leuten moechtest du kommen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Um wieviel Uhr soll ich deinen Tisch freihalten ?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("20 uhr");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("An welchem Tag wollt Ihr kommen",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("Mittwoch in einer Woche");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(30000);

    assertEquals("Cool wir sehen uns dann!",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

  @Test
  public void bookTableWeekday() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tisch buchen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Mit wie vielen Leuten moechtest du kommen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Um wieviel Uhr soll ich deinen Tisch freihalten ?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("20 uhr");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("An welchem Tag wollt Ihr kommen",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("Montag");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(30000);

    assertEquals("Cool wir sehen uns dann!",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

  @Test
  public void InvalidNumberOfGuests() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tisch buchen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Mit wie vielen Leuten moechtest du kommen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("test");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Sie muessen mindestens eine Person angeben.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Um wieviel Uhr soll ich deinen Tisch freihalten ?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("20 uhr");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("An welchem Tag wollt Ihr kommen",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("morgen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(30000);

    assertEquals("Cool wir sehen uns dann!",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

  @Test
  public void printShoppingCartBeforeBooking() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("thai peanut beef bestellen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Wie oft wollen Sie thai peanut beef bestellen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("1");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals(
        "Wollen Sie Tofu oder extra Curry, falls für das ausgewählte Gericht möglich, zu ihrer Bestellung hinzufügen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tofu");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Es wird 1 thai peanut beef mit tofu extra zum Warenkorb hinzugefügt, korrekt?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("ja");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Sie mÃ¼ssen zunÃ¤chst einen Tisch buchen um Bestellungen zu tÃ¤tigen.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("thai green chicken curry bestellen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Wie oft wollen Sie thai green chicken curry bestellen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    //
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("1");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals(
        "Wollen Sie Tofu oder extra Curry, falls für das ausgewählte Gericht möglich, zu ihrer Bestellung hinzufügen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tofu");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Es wird 1 thai green chicken curry mit tofu extra zum Warenkorb hinzugefügt, korrekt?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("ja");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Sie mÃ¼ssen zunÃ¤chst einen Tisch buchen um Bestellungen zu tÃ¤tigen.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("Warenkorb");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals(
        "Ihr Warenkorb beinhaltet derzeit folgende Gerichte: 1 thai peanut beef mit extra Tofu, 1 thai green chicken curry mit extra Tofu",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

  @Test
  public void printShoppingCartAfterBooking() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("thai peanut beef bestellen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Wie oft wollen Sie thai peanut beef bestellen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("1");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals(
        "Wollen Sie Tofu oder extra Curry, falls für das ausgewählte Gericht möglich, zu ihrer Bestellung hinzufügen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tofu");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Es wird 1 thai peanut beef mit tofu extra zum Warenkorb hinzugefügt, korrekt?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("ja");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Sie mÃ¼ssen zunÃ¤chst einen Tisch buchen um Bestellungen zu tÃ¤tigen.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("thai green chicken curry bestellen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Wie oft wollen Sie thai green chicken curry bestellen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    //
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("1");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals(
        "Wollen Sie Tofu oder extra Curry, falls für das ausgewählte Gericht möglich, zu ihrer Bestellung hinzufügen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tofu");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Es wird 1 thai peanut beef mit tofu extra zum Warenkorb hinzugefügt, korrekt?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("ja");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Sie mÃ¼ssen zunÃ¤chst einen Tisch buchen um Bestellungen zu tÃ¤tigen.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("tisch buchen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Mit wie vielen Leuten moechtest du kommen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Um wieviel Uhr soll ich deinen Tisch freihalten ?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("20");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("An welchem Tag wollt Ihr kommen",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("morgen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Cool wir sehen uns dann!",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

  }

  @Test
  public void printEmptyShoppingCart() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("warenkorb");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Ihr Warenkorb ist derzeit leer.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());

    Thread.sleep(5000);

  }

  public void printShoppingCartWithMultipleDishs() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("thai green chicken curry bestellen");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Wie oft wollen Sie thai green chicken curry bestellen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("3");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals(
        "Wollen Sie Tofu oder extra Curry, falls für das ausgewählte Gericht möglich, zu ihrer Bestellung hinzufügen?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("nein");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Es wird 3 thai green chicken curry zum Warenkorb hinzugefügt, korrekt?",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("ja");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Sie mÃ¼ssen zunÃ¤chst einen Tisch buchen um Bestellungen zu tÃ¤tigen.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("Warenkorb");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    assertEquals("Ihr Warenkorb beinhaltet derzeit folgende Gerichte: 3 thai green chicken curry",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

  @Test
  public void printDescription() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("thai green chicken curry beschreibung");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals(
        "Beschreibung von Thai green chicken curry : Master this aromatic, creamy and extremely tasty chicken Thai green curry recipe from Jamie Oliver and treat yourself to an authentic taste of South East Asia. Tofu Option verfÃ¼gbar.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

  // C101
  @Test
  public void passInvalidCommandShoppingCart() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("warenkorb");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Ihr Warenkorb ist derzeit leer.",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("test");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(15000);
    assertEquals("Das habe ich nicht verstanden. Bitte wiederhole deine Anfrage",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);

  }

  // C107
  public void sortDishesInAlphabeticOrder() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("gerichte alphabetisch sortieren");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals(
        "Es gibt: Garlic Paradise Salad, Thai green chicken curry, Thai Peanut Beef, Thai Spicy Basil Fried Rice, Thai Thighs Fish/Prawns",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

  // C109
  public void passInvalidCommandSortDishes() throws InterruptedException {

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("mythaistar extern");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);

    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("gerichte alphabetisch sortieren");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals(
        "Es gibt: Garlic Paradise Salad, Thai green chicken curry, Thai Peanut Beef, Thai Spicy Basil Fried Rice, Thai Thighs Fish/Prawns",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys("test");
    this.driver.findElement(By.cssSelector(".askt-utterance__input")).sendKeys(Keys.ENTER);
    Thread.sleep(5000);
    assertEquals("Das habe ich nicht verstanden. Bitte wiederhole deine Anfrage",
        this.driver.findElement(By.cssSelector(".askt-dialog__message--active-response")).getText());
    Thread.sleep(5000);
  }

}